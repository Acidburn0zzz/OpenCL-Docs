// Copyright 2017 The Khronos Group. 
//
//  Khronos licenses this file to you under the Creative Commons Attribution 4.0 
//  International (CC BY 4.0) License (the "License"); you may not use this file 
//  except in compliance with the License.  You may obtain a copy of the License 
//  at https://creativecommons.org/licenses/by/4.0/
//
//  Unless required by applicable law or agreed to in writing, material distributed 
//  under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR 
//  CONDITIONS OF ANY KIND, either express or implied. If all or a portion of this 
//  material is re-used, notice substantially similar to the following must be included:
//
//  This specification includes material developed at The Khronos Group 
//  (http://www.khronos.org/). Khronos supplied such material on an "AS IS" BASIS, 
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, under 
//  the terms of the Creative Commons Attribution 4.0 International (CC BY 4.0) 
//  License (the "License"), available at https://creativecommons.org/licenses/by/4.0/. 
//  All use of such material is governed by the term of the License. Khronos bears 
//  no responsibility whatsoever for additions or modifications to its material.

== Introduction
Modern processor architectures have embraced parallelism as an important
pathway to increased performance. Facing technical challenges with
higher clock speeds in a fixed power envelope, Central Processing Units
(CPUs) now improve performance by adding multiple cores. Graphics
Processing Units (GPUs) have also evolved from fixed function rendering
devices into programmable parallel processors. As todays computer
systems often include highly parallel CPUs, GPUs and other types of
processors, it is important to enable software developers to take full
advantage of these heterogeneous processing platforms.
{empty} +
{empty} +
Creating applications for heterogeneous parallel processing platforms is
challenging as traditional programming approaches for multi-core CPUs
and GPUs are very different. CPU-based parallel programming models are
typically based on standards but usually assume a shared address space
and do not encompass vector operations. General purpose GPU
programming models address complex memory hierarchies and vector
operations but are traditionally platform-, vendor- or
hardware-specific. These limitations make it difficult for a developer
to access the compute power of heterogeneous CPUs, GPUs and other types
of processors from a single, multi-platform source code base. More than
ever, there is a need to enable software developers to effectively take
full advantage of heterogeneous processing platforms  from high
performance compute servers, through desktop computer systems to
handheld devices - that include a diverse mix of parallel CPUs, GPUs and
other processors such as DSPs and the Cell/B.E. processor.
{empty} +
{empty} +
*OpenCL* (Open Computing Language) is an open royalty-free standard for
general purpose parallel programming across CPUs, GPUs and other
processors, giving software developers portable and efficient access to
the power of these heterogeneous processing platforms.
{empty} +
{empty} +
OpenCL supports a wide range of applications, ranging from embedded and
consumer software to HPC solutions, through a low-level,
high-performance, portable abstraction. By creating an efficient,
close-to-the-metal programming interface, OpenCL will form the
foundation layer of a parallel computing ecosystem of
platform-independent tools, middleware and applications. OpenCL is
particularly suited to play an increasingly significant role in emerging
interactive graphics applications that combine general parallel compute
algorithms with graphics rendering pipelines.
{empty} +
{empty} +
OpenCL consists of an API for coordinating parallel computation across
heterogeneous processors; and a cross-platform intermediate language
with a well-specified computation environment. The OpenCL standard:

* Supports both data- and
task-based parallel programming models

* Utilizes a portable and
self-contained intermediate representation with support for parallel
execution

* Defines consistent
numerical requirements based on IEEE 754

* Defines a configuration
profile for handheld and embedded devices

* Efficiently interoperates
with OpenGL, OpenGL ES and other graphics APIs

This document begins with an overview of basic concepts and the
architecture of OpenCL, followed by a detailed description of its
execution model, memory model and synchronization support. It then
discusses the OpenCL__platform and runtime API. Some examples are given
that describe sample compute use-cases and how they would be written in
OpenCL. The specification is divided into a core specification that any
OpenCL compliant implementation must support; a handheld/embedded
profile which relaxes the OpenCL compliance requirements for handheld
and embedded devices; and a set of optional extensions that are likely
to move into the core specification in later revisions of the OpenCL
specification.
