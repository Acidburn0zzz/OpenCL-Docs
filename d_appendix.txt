// Copyright 2017 The Khronos Group. 
//
//  Khronos licenses this file to you under the Creative Commons Attribution 4.0 
//  International (CC BY 4.0) License (the "License"); you may not use this file 
//  except in compliance with the License.  You may obtain a copy of the License 
//  at https://creativecommons.org/licenses/by/4.0/
//
//  Unless required by applicable law or agreed to in writing, material distributed 
//  under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR 
//  CONDITIONS OF ANY KIND, either express or implied. If all or a portion of this 
//  material is re-used, notice substantially similar to the following must be included:
//
//  This specification includes material developed at The Khronos Group 
//  (http://www.khronos.org/). Khronos supplied such material on an "AS IS" BASIS, 
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, under 
//  the terms of the Creative Commons Attribution 4.0 International (CC BY 4.0) 
//  License (the "License"), available at https://creativecommons.org/licenses/by/4.0/. 
//  All use of such material is governed by the term of the License. Khronos bears 
//  no responsibility whatsoever for additions or modifications to its material.

Appendix D CL_MEM_COPY_OVERLAP
------------------------------

The following code describes how to determine if there is overlap
between the source and destination rectangles specified to
*clEnqueueCopyBufferRect* provided the source and destination buffers
refer to the same buffer object.

----
unsigned int

check_copy_overlap(const size_t src_origin[],
                   const size_t dst_origin[],
                   const size_t region[],
                   const size_t row_pitch,
                   const size_t slice_pitch )
{

  const size_t slice_size = (region[1] - 1) * row_pitch + region[0];
  const size_t block_size = (region[2] - 1) * slice_pitch + slice_size;
  const size_t src_start = src_origin[2] * slice_pitch +
  src_origin[1] * row_pitch +
  src_origin[0];
  const size_t src_end = src_start + block_size;
  const size_t dst_start = dst_origin[2] * slice_pitch 
                           + dst_origin[1] * row_pitch 
                           +  dst_origin[0];

  F  const size_t dst_end = dst_start + block_size;

  /* No overlap if dst ends before src starts or if src ends

   * before dst starts.

   */

  if( (dst_end <= src_start) || (src_end <= dst_start) ){
    return 0;
  }

  /* No overlap if region[0] for dst or src fits in the gap

   * between region[0] and row_pitch.

   */

  {

    const size_t src_dx = src_origin[0] % row_pitch;
    const size_t dst_dx = dst_origin[0] % row_pitch;

    if( ((dst_dx >= src_dx + region[0]) &&

        (dst_dx + region[0] <= src_dx + row_pitch)) ||

        ((src_dx >= dst_dx + region[0]) &&

       (src_dx + region[0] <= dst_dx + row_pitch)) )

      {
        return 0;
      }

  }

  
  /* No overlap if region[1] for dst or src fits in the gap

   * between region[1] and slice_pitch.

   */

   {

      const size_t src_dy =

        (src_origin[1] * row_pitch + src_origin[0]) % slice_pitch;

      const size_t dst_dy =

        (dst_origin[1] * row_pitch + dst_origin[0]) % slice_pitch;

  
      if( ((dst_dy >= src_dy + slice_size) &&

          (dst_dy + slice_size <= src_dy + slice_pitch)) ||

          ((src_dy >= dst_dy + slice_size) &&

          (src_dy + slice_size <= dst_dy + slice_pitch)) ) {
        return 0;

      }

   }

 
 /* Otherwise src and dst overlap. */

 return 1;

}
----


