// Copyright 2017 The Khronos Group. 
//
//  Khronos licenses this file to you under the Creative Commons Attribution 4.0 
//  International (CC BY 4.0) License (the "License"); you may not use this file 
//  except in compliance with the License.  You may obtain a copy of the License 
//  at https://creativecommons.org/licenses/by/4.0/
//
//  Unless required by applicable law or agreed to in writing, material distributed 
//  under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR 
//  CONDITIONS OF ANY KIND, either express or implied. If all or a portion of this 
//  material is re-used, notice substantially similar to the following must be included:
//
//  This specification includes material developed at The Khronos Group 
//  (http://www.khronos.org/). Khronos supplied such material on an "AS IS" BASIS, 
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, under 
//  the terms of the Creative Commons Attribution 4.0 International (CC BY 4.0) 
//  License (the "License"), available at https://creativecommons.org/licenses/by/4.0/. 
//  All use of such material is governed by the term of the License. Khronos bears 
//  no responsibility whatsoever for additions or modifications to its material.

[[cl_khr_initialize_memory]]
== Local and Private Memory Initialization

Memory is allocated in various forms in OpenCL both explicitly (global memory) or implicitly (local, private memory). This allocation so far does not provide a straightforward mechanism to initialize the memory on
allocation. In other words what is lacking is the equivalent of calloc for the currently supported malloc like capability. This functionality is useful for a variety of reasons including ease of debugging, application controlled limiting of visibility to previous contents of memory and in some cases, optimization

This extension adds support for initializing local and private memory before a kernel begins execution. This extension name is *cl_khr_initialize_memory*.

[[cl_khr_initialize_memory-additions-to-chapter-4]]
=== Additions to Chapter 4 of the OpenCL 2.2 Specification

Add a new context property to _table 4.5_ in _section 4.4_.

[cols="3,2,4",options="header",]
|=======================================================================
|*cl_context_properties enum*
|*Property value*
|*Description*

|*CL_CONTEXT_MEMORY_ +
INITIALIZE_KHR*
|cl_context_memory_ +
initialize_khr
|Describes which memory types for the context must be initialized. This
is a bit-field, where the following values are currently supported: +
{blank}
CL_CONTEXT_MEMORY_ +
INITIALIZE_LOCAL_KHR – Initialize local memory to zeros. +
{blank}
CL_CONTEXT_MEMORY_ +
INITIALIZE_PRIVATE_KHR – Initialize private memory to zeros.

|=======================================================================

[[cl_khr_initialize_memory-additions-to-chapter-6]]
=== Additions to Chapter 6 of the OpenCL 2.2 Specification

Updates to _section 6.9_ – Restrictions

If the context is created with CL CONTEXT MEMORY INITIALIZE KHR, appropriate memory locations as specified by the bit-field is initialized with zeroes, prior to the start of execution of any kernel. The driver chooses when, prior to kernel execution, the initialization of local and/or private memory is performed. The only requirement is there should be no values set from outside the context, which can be read during a kernel execution.
