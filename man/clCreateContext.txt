// Copyright (c) 2014-2019 Khronos Group. This work is licensed under a
// Creative Commons Attribution 4.0 International License; see
// http://creativecommons.org/licenses/by/4.0/

:data-uri:
:icons: font
include::../config/attribs.txt[]

= clCreateContext(3)

== Name
clCreateContext - Create an OpenCL context

== C Specification

To create an OpenCL context, call the function:

include::{api}/protos/clCreateContext.txt[]


== Parameters

_properties_ specifies a list of context property names and their
corresponding values.
Each property name is immediately followed by the corresponding desired
value.
The list is terminated with 0.
The list of supported properties is described in the
link:{html_spec_relative}#context-properties-table[Context Properties] table.
_properties_ can be `NULL` in which case the platform that is selected is
implementation-defined.

_num_devices_ is the number of devices specified in the _devices_ argument.

_devices_ is a pointer to a list of unique devices^10^ returned by
*clGetDeviceIDs* or sub-devices created by *clCreateSubDevices* for a
platform.

10::
    Duplicate devices specified in _devices_ are ignored.

_pfn_notify_ is a callback function that can be registered by the
application.
This callback function will be used by the OpenCL implementation to report
information on errors during context creation as well as errors that occur
at runtime in this context.
This callback function may be called asynchronously by the OpenCL
implementation.
It is the applications responsibility to ensure that the callback function
is thread-safe.
The parameters to this callback function are:

  * _errinfo_ is a pointer to an error string.
  * _private_info_ and _cb_ represent a pointer to binary data that is
    returned by the OpenCL implementation that can be used to log additional
    information helpful in debugging the error.
  * _user_data_ is a pointer to user supplied data.

If _pfn_notify_ is `NULL`, no callback function is registered.

_user_data_ will be passed as the _user_data_ argument when _pfn_notify_ is
called.
_user_data_ can be `NULL`.

_errcode_ret_ will return an appropriate error code.
If _errcode_ret_ is `NULL`, no error code is returned.


== Description

// refBody

Contexts are used by the OpenCL runtime for managing objects such as
command-queues, memory, program and kernel objects and for executing kernels
on one or more devices specified in the context.

[[context-properties-table]]
._List of supported properties by_ *clCreateContext*
[width="100%",cols="<34%,<33%,<33%",options="header"]
|====
| *cl_context_properties enum* | Property value | Description
| *CL_CONTEXT_PLATFORM*
  | cl_platform_id
      | Specifies the platform to use.
| *CL_CONTEXT_INTEROP_USER_SYNC*
  | cl_bool
      | Specifies whether the user is responsible for synchronization
        between OpenCL and other APIs.
        Please refer to the specific sections in the OpenCL 2.0 extension
        specification that describe sharing with other APIs for restrictions
        on using this flag.

        If CL_CONTEXT_INTEROP_USER_SYNC is not specified, a default of
        CL_FALSE is assumed.
|====

NOTE: There are a number of cases where error notifications need to be
delivered due to an error that occurs outside a context.
Such notifications may not be delivered through the _pfn_notify_ callback.
Where these notifications go is implementation-defined.

*clCreateContext* returns a valid non-zero context and _errcode_ret_ is set
to CL_SUCCESS if the context is created successfully.
Otherwise, it returns a `NULL` value with the following error values
returned in _errcode_ret_:

  * CL_INVALID_PLATFORM if _properties_ is `NULL` and no platform could be
    selected or if platform value specified in _properties_ is not a valid
    platform.
  * CL_INVALID_PROPERTY if context property name in _properties_ is not a
    supported property name, if the value specified for a supported property
    name is not valid, or if the same property name is specified more than
    once.
  * CL_INVALID_VALUE if _devices_ is `NULL`.
  * CL_INVALID_VALUE if _num_devices_ is equal to zero.
  * CL_INVALID_VALUE if _pfn_notify_ is `NULL` but _user_data_ is not
    `NULL`.
  * CL_INVALID_DEVICE if _devices_ contains an invalid device.
  * CL_DEVICE_NOT_AVAILABLE if a device in _devices_ is currently not
    available even though the device was returned by *clGetDeviceIDs*.
  * CL_OUT_OF_RESOURCES if there is a failure to allocate resources required
    by the OpenCL implementation on the device.
  * CL_OUT_OF_HOST_MEMORY if there is a failure to allocate resources
    required by the OpenCL implementation on the host.


== See Also

No cross-references are available


== Document Notes

For more information, see the OpenCL Specification at URL

https://www.khronos.org/registry/OpenCL/specs/2.2/html/OpenCL_API.html#clCreateContext

This page is extracted from the OpenCL Specification. 
Fixes and changes should be made to the Specification, not directly.

include::footer.txt[]

