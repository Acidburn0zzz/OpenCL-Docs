// Copyright (c) 2014-2019 Khronos Group. This work is licensed under a
// Creative Commons Attribution 4.0 International License; see
// http://creativecommons.org/licenses/by/4.0/

:data-uri:
:icons: font
include::../config/attribs.txt[]

= clGetDeviceInfo(3)

== Name
clGetDeviceInfo - Query specific information about a device

== C Specification

To get specific information about an OpenCL device, call the function:

include::{api}/protos/clGetDeviceInfo.txt[]


== Parameters

_device_ may be a device returned by *clGetDeviceIDs* or a sub-device
created by *clCreateSubDevices*.
If _device_ is a sub-device, the specific information for the sub-device
will be returned.
The information that can be queried using *clGetDeviceInfo* is specified in
the link:{html_spec_relative}#device-queries-table[Device Queries] table.

_param_name_ is an enumeration constant that identifies the device
information being queried.
It can be one of the following values as specified in the
link:{html_spec_relative}#device-queries-table[Device Queries] table.

_param_value_ is a pointer to memory location where appropriate values for a
given _param_name_, as specified in the link:{html_spec_relative}#device-queries-table[Device
Queries] table, will be returned.
If _param_value_ is `NULL`, it is ignored.

_param_value_size_ specifies the size in bytes of memory pointed to by
_param_value_.
This size in bytes must be {geq} size of return type specified in the
link:{html_spec_relative}#device-queries-table[Device Queries] table.

_param_value_size_ret_ returns the actual size in bytes of data being
queried by _param_name_.
If _param_value_size_ret_ is `NULL`, it is ignored.


== Description

// refBody

The device queries described in the link:{html_spec_relative}#device-queries-table[Device Queries]
table should return the same information for a root-level device i.e. a
device returned by *clGetDeviceIDs* and any sub-devices created from this
device except for the following queries:

  * CL_DEVICE_GLOBAL_MEM_CACHE_SIZE
  * CL_DEVICE_BUILT_IN_KERNELS
  * CL_DEVICE_PARENT_DEVICE
  * CL_DEVICE_PARTITION_TYPE
  * CL_DEVICE_REFERENCE_COUNT

[[device-queries-table]]
.OpenCL Device Queries
[width="100%",cols="<30%,<20%,<50%",options="header"]
|====
| *cl_device_info* | Return Type | Description
| CL_DEVICE_TYPE
  | cl_device_type
      | The OpenCL device type.
        Currently supported values are:

        CL_DEVICE_TYPE_CPU, CL_DEVICE_TYPE_GPU, CL_DEVICE_TYPE_ACCELERATOR,
        CL_DEVICE_TYPE_DEFAULT, a combination of the above types or
        CL_DEVICE_TYPE_CUSTOM.
| CL_DEVICE_VENDOR_ID
  | cl_uint
      | A unique device vendor identifier.
        An example of a unique device identifier could be the PCIe ID.
| CL_DEVICE_MAX_COMPUTE_UNITS
  | cl_uint
      | The number of parallel compute units on the OpenCL device.
        A work-group executes on a single compute unit.
        The minimum value is 1.
| CL_DEVICE_MAX_WORK_ITEM_DIMENSIONS
  | cl_uint
      | Maximum dimensions that specify the global and local work-item IDs
        used by the data parallel execution model. (Refer to
        *clEnqueueNDRangeKernel*).
        The minimum value is 3 for devices that are not of type
        CL_DEVICE_TYPE_CUSTOM.
| CL_DEVICE_MAX_WORK_ITEM_SIZES
  | size_t []
      | Maximum number of work-items that can be specified in each dimension
        of the work-group to *clEnqueueNDRangeKernel*.

        Returns _n_ size_t entries, where _n_ is the value returned by the
        query for CL_DEVICE_MAX_WORK_ITEM_DIMENSIONS.

        The minimum value is (1, 1, 1) for devices that are not of type
        CL_DEVICE_TYPE_CUSTOM.
| CL_DEVICE_MAX_WORK_GROUP_SIZE
  | size_t
      | Maximum number of work-items in a work-group that a device is
        capable of executing on a single compute unit, for any given
        kernel-instance running on the device. (Refer also to
        *clEnqueueNDRangeKernel* and CL_KERNEL_WORK_GROUP_SIZE ).
        The minimum value is 1.
        The returned value is an upper limit and will not necessarily
        maximize performance.
        This maximum may be larger than supported by a specific kernel
        (refer to the CL_KERNEL_WORK_GROUP_SIZE query of *clGetKernelWorkGroupInfo*).
| CL_DEVICE_PREFERRED_VECTOR_WIDTH_CHAR   +
  CL_DEVICE_PREFERRED_VECTOR_WIDTH_SHORT  +
  CL_DEVICE_PREFERRED_VECTOR_WIDTH_INT    +
  CL_DEVICE_PREFERRED_VECTOR_WIDTH_LONG   +
  CL_DEVICE_PREFERRED_VECTOR_WIDTH_FLOAT  +
  CL_DEVICE_PREFERRED_VECTOR_WIDTH_DOUBLE +
  CL_DEVICE_PREFERRED_VECTOR_WIDTH_HALF
  | cl_uint
      | Preferred native vector width size for built-in scalar types that
        can be put into vectors.
        The vector width is defined as the number of scalar elements that
        can be stored in the vector.

        If double precision is not supported,
        CL_DEVICE_PREFERRED_VECTOR_WIDTH_DOUBLE must return 0.

        If the *cl_khr_fp16* extension is not supported,
        CL_DEVICE_PREFERRED_VECTOR_WIDTH_HALF must return 0.
| CL_DEVICE_NATIVE_VECTOR_WIDTH_CHAR   +
  CL_DEVICE_NATIVE_VECTOR_WIDTH_SHORT  +
  CL_DEVICE_NATIVE_VECTOR_WIDTH_INT    +
  CL_DEVICE_NATIVE_VECTOR_WIDTH_LONG   +
  CL_DEVICE_NATIVE_VECTOR_WIDTH_FLOAT  +
  CL_DEVICE_NATIVE_VECTOR_WIDTH_DOUBLE +
  CL_DEVICE_NATIVE_VECTOR_WIDTH_HALF
  | cl_uint
      | Returns the native ISA vector width.
        The vector width is defined as the number of scalar elements that
        can be stored in the vector.

        If double precision is not supported,
        CL_DEVICE_NATIVE_VECTOR_WIDTH_DOUBLE must return 0.

        If the *cl_khr_fp16* extension is not supported,
        CL_DEVICE_NATIVE_VECTOR_WIDTH_HALF must return 0.
| CL_DEVICE_MAX_CLOCK_FREQUENCY
  | cl_uint
      | Clock frequency of the device in MHz.
        The meaning of this value is implementation-defined.
        For devices with multiple clock domains, the clock frequency for any
        of the clock domains may be returned.
        For devices that dynamically change frequency for power or thermal
        reasons, the returned clock frequency may be any valid frequency.
| CL_DEVICE_ADDRESS_BITS
  | cl_uint
      | The default compute device address space size of the global address
        space specified as an unsigned integer value in bits.
        Currently supported values are 32 or 64 bits.
| CL_DEVICE_MAX_MEM_ALLOC_SIZE
  | cl_ulong
      | Max size of memory object allocation in bytes.
        The minimum value is max(min(1024 {times} 1024 {times} 1024, 1/4^th^
        of CL_DEVICE_GLOBAL_MEM_SIZE), 32 {times} 1024 {times} 1024) for
        devices that are not of type CL_DEVICE_TYPE_CUSTOM.
| CL_DEVICE_IMAGE_SUPPORT
  | cl_bool
      | Is CL_TRUE if images are supported by the OpenCL device and CL_FALSE
        otherwise.
| CL_DEVICE_MAX_READ_IMAGE_ARGS^4^
  | cl_uint
      | Max number of image objects arguments of a kernel declared with the
        read_only qualifier.
        The minimum value is 128 if CL_DEVICE_IMAGE_SUPPORT is CL_TRUE.
| CL_DEVICE_MAX_WRITE_IMAGE_ARGS
  | cl_uint
      | Max number of image objects arguments of a kernel declared with the
        write_only qualifier.
        The minimum value is 64 if CL_DEVICE_IMAGE_SUPPORT is CL_TRUE.
| CL_DEVICE_MAX_READ_WRITE_IMAGE_ARGS^5^
  | cl_uint
      | Max number of image objects arguments of a kernel declared with the
        write_only or read_write qualifier.
        The minimum value is 64 if CL_DEVICE_IMAGE_SUPPORT is CL_TRUE.
| CL_DEVICE_IL_VERSION
  | char[]
      | The intermediate languages that can be supported by
        *clCreateProgramWithIL* for this device.
        Returns a space-separated list of IL version strings of the form
        <IL_Prefix>_<Major_Version>.<Minor_Version>.
        For OpenCL 2.2, SPIR-V is a required IL prefix.
| CL_DEVICE_IMAGE2D_MAX_WIDTH
  | size_t
      | Max width of 2D image or 1D image not created from a buffer object
        in pixels.

        The minimum value is 16384 if CL_DEVICE_IMAGE_SUPPORT is CL_TRUE.
| CL_DEVICE_IMAGE2D_MAX_HEIGHT
  | size_t
      | Max height of 2D image in pixels.

        The minimum value is 16384 if CL_DEVICE_IMAGE_SUPPORT is CL_TRUE.
| CL_DEVICE_IMAGE3D_MAX_WIDTH
  | size_t
      | Max width of 3D image in pixels.

        The minimum value is 2048 if CL_DEVICE_IMAGE_SUPPORT is CL_TRUE.
| CL_DEVICE_IMAGE3D_MAX_HEIGHT
  | size_t
      | Max height of 3D image in pixels.

        The minimum value is 2048 if CL_DEVICE_IMAGE_SUPPORT is CL_TRUE.
| CL_DEVICE_IMAGE3D_MAX_DEPTH
  | size_t
      | Max depth of 3D image in pixels.

        The minimum value is 2048 if CL_DEVICE_IMAGE_SUPPORT is CL_TRUE.
| CL_DEVICE_IMAGE_MAX_BUFFER_SIZE
  | size_t
      | Max number of pixels for a 1D image created from a buffer object.

        The minimum value is 65536 if CL_DEVICE_IMAGE_SUPPORT is CL_TRUE.
| CL_DEVICE_IMAGE_MAX_ARRAY_SIZE
  | size_t
      | Max number of images in a 1D or 2D image array.

        The minimum value is 2048 if CL_DEVICE_IMAGE_SUPPORT is CL_TRUE.
| CL_DEVICE_MAX_SAMPLERS
  | cl_uint
      | Maximum number of samplers that can be used in a kernel.

        The minimum value is 16 if CL_DEVICE_IMAGE_SUPPORT is CL_TRUE.
| CL_DEVICE_IMAGE_PITCH_ALIGNMENT
  | cl_uint
      | The row pitch alignment size in pixels for 2D images created from a
        buffer.
        The value returned must be a power of 2.

        If the device does not support images, this value must be 0.
| CL_DEVICE_IMAGE_BASE_ADDRESS_ALIGNMENT
  | cl_uint
      | This query should be used when a 2D image is created from a buffer
        which was created using CL_MEM_USE_HOST_PTR.
        The value returned must be a power of 2.

        This query specifies the minimum alignment in pixels of the host_ptr
        specified to *clCreateBuffer*.

        If the device does not support images, this value must be 0.
| CL_DEVICE_MAX_PIPE_ARGS
  | cl_uint
      | The maximum number of pipe objects that can be passed as arguments
        to a kernel.
        The minimum value is 16.
| CL_DEVICE_PIPE_MAX_ACTIVE_RESERVATIONS
  | cl_uint
      | The maximum number of reservations that can be active for a pipe per
        work-item in a kernel.
        A work-group reservation is counted as one reservation per
        work-item.
        The minimum value is 1.
| CL_DEVICE_PIPE_MAX_PACKET_SIZE
  | cl_uint
      | The maximum size of pipe packet in bytes.
        The minimum value is 1024 bytes.
| CL_DEVICE_MAX_PARAMETER_SIZE
  | size_t
      | Max size in bytes of all arguments that can be passed to a kernel.

        The minimum value is 1024 for devices that are not of type
        CL_DEVICE_TYPE_CUSTOM.
        For this minimum value, only a maximum of 128 arguments can be
        passed to a kernel
| CL_DEVICE_MEM_BASE_ADDR_ALIGN
  | cl_uint
      | Alignment requirement (in bits) for sub-buffer offsets.
        The minimum value is the size (in bits) of the largest OpenCL
        built-in data type supported by the device (long16 in FULL profile,
        long16 or int16 in EMBEDDED profile) for devices that are not of
        type CL_DEVICE_TYPE_CUSTOM.
| CL_DEVICE_SINGLE_FP_CONFIG^6^
  | cl_device_fp_config
      | Describes single precision floating-point capability of the device.
        This is a bit-field that describes one or more of the following
        values:

        CL_FP_DENORM - denorms are supported

        CL_FP_INF_NAN - INF and quiet NaNs are supported.

        CL_FP_ROUND_TO_NEAREST-- round to nearest even rounding mode
        supported

        CL_FP_ROUND_TO_ZERO - round to zero rounding mode supported

        CL_FP_ROUND_TO_INF - round to positive and negative infinity
        rounding modes supported

        CL_FP_FMA - IEEE754-2008 fused multiply-add is supported.

        CL_FP_CORRECTLY_ROUNDED_DIVIDE_SQRT - divide and sqrt are correctly
        rounded as defined by the IEEE754 specification.

        CL_FP_SOFT_FLOAT - Basic floating-point operations (such as
        addition, subtraction, multiplication) are implemented in software.

        For the full profile, the mandated minimum floating-point capability
        for devices that are not of type CL_DEVICE_TYPE_CUSTOM is:
        CL_FP_ROUND_TO_NEAREST \| CL_FP_INF_NAN.

        For the embedded profile, see section 10.

// Editing Note: It's unclear what "`section 10`" refers to.
| CL_DEVICE_DOUBLE_FP_CONFIG^7^
  | cl_device_fp_config
      | Describes double precision floating-point capability of the OpenCL
        device.
        This is a bit-field that describes one or more of the following
        values:

        CL_FP_DENORM - denorms are supported

        CL_FP_INF_NAN - INF and NaNs are supported.

        CL_FP_ROUND_TO_NEAREST - round to nearest even rounding mode
        supported.

        CL_FP_ROUND_TO_ZERO - round to zero rounding mode supported.

        CL_FP_ROUND_TO_INF - round to positive and negative infinity
        rounding modes supported.

        CL_FP_FMA - IEEE754-2008 fused multiply-add is supported.

        CL_FP_SOFT_FLOAT - Basic floating-point operations (such as
        addition, subtraction, multiplication) are implemented in software.

        Double precision is an optional feature so the mandated minimum
        double precision floating-point capability is 0.

        If double precision is supported by the device, then the minimum
        double precision floating-point capability must be: +
        CL_FP_FMA \| +
        CL_FP_ROUND_TO_NEAREST \| +
        CL_FP_INF_NAN \| +
        CL_FP_DENORM.
| CL_DEVICE_GLOBAL_MEM_CACHE_TYPE
  | cl_device_mem_cache_type
      | Type of global memory cache supported.
        Valid values are: CL_NONE, CL_READ_ONLY_CACHE and
        CL_READ_WRITE_CACHE.
| CL_DEVICE_GLOBAL_MEM_CACHELINE_SIZE
  | cl_uint
      | Size of global memory cache line in bytes.
| CL_DEVICE_GLOBAL_MEM_CACHE_SIZE
  | cl_ulong
      | Size of global memory cache in bytes.
| CL_DEVICE_GLOBAL_MEM_SIZE
  | cl_ulong
      | Size of global device memory in bytes.
| CL_DEVICE_MAX_CONSTANT_BUFFER_SIZE
  | cl_ulong
      | Max size in bytes of a constant buffer allocation.
        The minimum value is 64 KB for devices that are not of type
        CL_DEVICE_TYPE_CUSTOM.
| CL_DEVICE_MAX_CONSTANT_ARGS
  | cl_uint
      | Max number of arguments declared with the `+__constant+` qualifier
        in a kernel.
        The minimum value is 8 for devices that are not of type
        CL_DEVICE_TYPE_CUSTOM.
| CL_DEVICE_MAX_GLOBAL_VARIABLE_SIZE
  | size_t
      | The maximum number of bytes of storage that may be allocated for any
        single variable in program scope or inside a function in an OpenCL
        kernel language declared in the global address space.

        The minimum value is 64 KB.
| CL_DEVICE_GLOBAL_VARIABLE_PREFERRED_TOTAL_SIZE
  | size_t
      | Maximum preferred total size, in bytes, of all program variables in
        the global address space.
        This is a performance hint.
        An implementation may place such variables in storage with optimized
        device access.
        This query returns the capacity of such storage.
        The minimum value is 0.
| CL_DEVICE_LOCAL_MEM_TYPE
  | cl_device_local_mem_type
      | Type of local memory supported.
        This can be set to CL_LOCAL implying dedicated local memory storage
        such as SRAM , or CL_GLOBAL.

        For custom devices, CL_NONE can also be returned indicating no local
        memory support.
| CL_DEVICE_LOCAL_MEM_SIZE
  | cl_ulong
      | Size of local memory region in bytes.
        The minimum value is 32 KB for devices that are not of type
        CL_DEVICE_TYPE_CUSTOM.
| CL_DEVICE_ERROR_CORRECTION_SUPPORT
  | cl_bool
      | Is CL_TRUE if the device implements error correction for all
        accesses to compute device memory (global and constant).
        Is CL_FALSE if the device does not implement such error correction.
| CL_DEVICE_PROFILING_TIMER_RESOLUTION
  | size_t
      | Describes the resolution of device timer.
        This is measured in nanoseconds.
        Refer to link:{html_spec_relative}#profiling-operations[Profiling Operations] for details.
| CL_DEVICE_ENDIAN_LITTLE
  | cl_bool
      | Is CL_TRUE if the OpenCL device is a little endian device and
        CL_FALSE otherwise
| CL_DEVICE_AVAILABLE
  | cl_bool
      | Is CL_TRUE if the device is available and CL_FALSE otherwise.
        A device is considered to be available if the device can be expected
        to successfully execute commands enqueued to the device.
| CL_DEVICE_COMPILER_AVAILABLE
  | cl_bool
      | Is CL_FALSE if the implementation does not have a compiler available
        to compile the program source.

        Is CL_TRUE if the compiler is available.
        This can be CL_FALSE for the embedded platform profile only.
| CL_DEVICE_LINKER_AVAILABLE
  | cl_bool
      | Is CL_FALSE if the implementation does not have a linker available.
        Is CL_TRUE if the linker is available.

        This can be CL_FALSE for the embedded platform profile only.

        This must be CL_TRUE if CL_DEVICE_COMPILER_AVAILABLE is CL_TRUE.
| CL_DEVICE_EXECUTION_CAPABILITIES
  | cl_device_exec_ capabilities
      | Describes the execution capabilities of the device.
        This is a bit-field that describes one or more of the following
        values:

        CL_EXEC_KERNEL - The OpenCL device can execute OpenCL kernels.

        CL_EXEC_NATIVE_KERNEL - The OpenCL device can execute native
        kernels.

        The mandated minimum capability is: CL_EXEC_KERNEL.
| CL_DEVICE_QUEUE_ON_HOST_PROPERTIES^8^
  | cl_command_queue_properties
      | Describes the on host command-queue properties supported by the
        device.
        This is a bit-field that describes one or more of the following
        values:

        CL_QUEUE_OUT_OF_ORDER_EXEC_MODE_ENABLE +
        CL_QUEUE_PROFILING_ENABLE

        These properties are described in the link:{html_spec_relative}#queue-properties-table[Queue Properties] table.

        The mandated minimum capability is: CL_QUEUE_PROFILING_ENABLE.
| CL_DEVICE_QUEUE_ON_DEVICE_PROPERTIES
  | cl_command_queue_properties
      | Describes the on device command-queue properties supported by the
        device.
        This is a bit-field that describes one or more of the following
        values:

        CL_QUEUE_OUT_OF_ORDER_EXEC_MODE_ENABLE +
        CL_QUEUE_PROFILING_ENABLE

        These properties are described in the link:{html_spec_relative}#queue-properties-table[Queue Properties] table.

        The mandated minimum capability is:
        CL_QUEUE_OUT_OF_ORDER_EXEC_MODE_ENABLE \| CL_QUEUE_PROFILING_ENABLE.
| CL_DEVICE_QUEUE_ON_DEVICE_PREFERRED_SIZE
  | cl_uint
      | The size of the device queue in bytes preferred by the
        implementation.
        Applications should use this size for the device queue to ensure
        good performance.

        The minimum value is 16 KB
| CL_DEVICE_QUEUE_ON_DEVICE_MAX_SIZE
  | cl_uint
      | The max. size of the device queue in bytes.
        The minimum value is 256 KB for the full profile and 64 KB for the
        embedded profile
| CL_DEVICE_MAX_ON_DEVICE_QUEUES
  | cl_uint
      | The maximum number of device queues that can be created for this
        device in a single context.

        The minimum value is 1.
| CL_DEVICE_MAX_ON_DEVICE_EVENTS
  | cl_uint
      | The maximum number of events in use by a device queue.
        These refer to events returned by the `enqueue_` built-in functions
        to a device queue or user events returned by the `create_user_event`
        built-in function that have not been released.

        The minimum value is 1024.
| CL_DEVICE_BUILT_IN_KERNELS
  | char[]
      | A semi-colon separated list of built-in kernels supported by the
        device.
        An empty string is returned if no built-in kernels are supported by
        the device.
| CL_DEVICE_PLATFORM
  | cl_platform_id
      | The platform associated with this device.
| CL_DEVICE_NAME
  | char[]
      | Device name string.
| CL_DEVICE_VENDOR
  | char[]
      | Vendor name string.
| CL_DRIVER_VERSION
  | char[]
      | OpenCL software driver version string.
        Follows a vendor-specific format.
| CL_DEVICE_PROFILE^9^
  | char[]
      | OpenCL profile string.
        Returns the profile name supported by the device.
        The profile name returned can be one of the following strings:

        FULL_PROFILE - if the device supports the OpenCL specification
        (functionality defined as part of the core specification and does
        not require any extensions to be supported).

        EMBEDDED_PROFILE - if the device supports the OpenCL embedded
        profile.
| CL_DEVICE_VERSION
  | char[]
      | OpenCL version string.
        Returns the OpenCL version supported by the device. This version
        string has the following format:

        _OpenCL<space><major_version.minor_version><space><vendor-specific
        information>_

        The major_version.minor_version value returned will be 2.2.
| CL_DEVICE_OPENCL_C_VERSION
  | char[]
      | OpenCL C version string.
        Returns the highest OpenCL C version supported by the compiler for
        this device that is not of type CL_DEVICE_TYPE_CUSTOM.
        This version string has the following format:

        _OpenCL<space>C<space><major_version.minor_version><space><vendor-specific
        information>_

        The major_version.minor_version value returned must be 2.0 if
        CL_DEVICE_VERSION is OpenCL 2.0.

        The major_version.minor_version value returned must be 1.2 if
        CL_DEVICE_VERSION is OpenCL 1.2.

        The major_version.minor_version value returned must be 1.1 if
        CL_DEVICE_VERSION is OpenCL 1.1.

        The major_version.minor_version value returned can be 1.0 or 1.1 if
        CL_DEVICE_VERSION is OpenCL 1.0.
| CL_DEVICE_EXTENSIONS
  | char[]
      | Returns a space separated list of extension names (the extension
        names themselves do not contain any spaces) supported by the device.
        The list of extension names returned can be vendor supported
        extension names and one or more of the following Khronos approved
        extension names:

        *cl_khr_int64_base_atomics* +
        *cl_khr_int64_extended_atomics* +
        *cl_khr_fp16* +
        *cl_khr_gl_sharing* +
        *cl_khr_gl_event* +
        *cl_khr_d3d10_sharing* +
        *cl_khr_dx9_media_sharing* +
        *cl_khr_d3d11_sharing* +
        *cl_khr_gl_depth_images* +
        *cl_khr_gl_msaa_sharing* +
        *cl_khr_initialize_memory* +
        *cl_khr_terminate_context* +
        *cl_khr_spir* +
        *cl_khr_srgb_image_writes*

        The following approved Khronos extension names must be returned by
        all devices that support OpenCL C 2.0:

        *cl_khr_byte_addressable_store* +
        *cl_khr_fp64* (for backward compatibility if double precision is
        supported) +
        *cl_khr_3d_image_writes* +
        *cl_khr_image2d_from_buffer* +
        *cl_khr_depth_images*

        Please refer to the OpenCL 2.0 Extension Specification for a
        detailed description of these extensions.
| CL_DEVICE_PRINTF_BUFFER_SIZE
  | size_t
      | Maximum size in bytes of the internal buffer that holds the output
        of printf calls from a kernel.
        The minimum value for the FULL profile is 1 MB.
| CL_DEVICE_PREFERRED_INTEROP_USER_SYNC
  | cl_bool
      | Is CL_TRUE if the devices preference is for the user to be
        responsible for synchronization, when sharing memory objects between
        OpenCL and other APIs such as DirectX, CL_FALSE if the device /
        implementation has a performant path for performing synchronization
        of memory object shared between OpenCL and other APIs such as
        DirectX.
| CL_DEVICE_PARENT_DEVICE
  | cl_device_id
      | Returns the cl_device_id of the parent device to which this
        sub-device belongs.
        If _device_ is a root-level device, a `NULL` value is returned.
| CL_DEVICE_PARTITION_MAX_SUB_DEVICES
  | cl_uint
      | Returns the maximum number of sub-devices that can be created when a
        device is partitioned.

        The value returned cannot exceed CL_DEVICE_MAX_COMPUTE_UNITS.
| CL_DEVICE_PARTITION_PROPERTIES
  | cl_device_partition_ property[]
      | Returns the list of partition types supported by _device_.
        This is an array of cl_device_partition_property values drawn from
        the following list:

        CL_DEVICE_PARTITION_EQUALLY +
        CL_DEVICE_PARTITION_BY_COUNTS +
        CL_DEVICE_PARTITION_BY_AFFINITY_DOMAIN

        If the device cannot be partitioned (i.e. there is no partitioning
        scheme supported by the device that will return at least two
        subdevices), a value of 0 will be returned.
| CL_DEVICE_PARTITION_AFFINITY_DOMAIN
  | cl_device_affinity_ domain
      | Returns the list of supported affinity domains for partitioning the
        device using CL_DEVICE_PARTITION_BY_AFFINITY_DOMAIN.
        This is a bit-field that describes one or more of the following
        values:

        CL_DEVICE_AFFINITY_DOMAIN_NUMA +
        CL_DEVICE_AFFINITY_DOMAIN_L4_CACHE +
        CL_DEVICE_AFFINITY_DOMAIN_L3_CACHE +
        CL_DEVICE_AFFINITY_DOMAIN_L2_CACHE +
        CL_DEVICE_AFFINITY_DOMAIN_L1_CACHE +
        CL_DEVICE_AFFINITY_DOMAIN_NEXT_PARTITIONABLE

        If the device does not support any affinity domains, a value of 0
        will be returned.
| CL_DEVICE_PARTITION_TYPE
  | cl_device_partition_ property[]
      | Returns the properties argument specified in *clCreateSubDevices* if
        device is a sub-device.
        In the case where the properties argument to *clCreateSubDevices* is
        CL_DEVICE_PARTITION_BY_AFFINITY_DOMAIN,
        CL_DEVICE_AFFINITY_DOMAIN_NEXT_PARTITIONABLE, the affinity domain
        used to perform the partition will be returned.
        This can be one of the following values:

        CL_DEVICE_AFFINITY_DOMAIN_NUMA +
        CL_DEVICE_AFFINITY_DOMAIN_L4_CACHE +
        CL_DEVICE_AFFINITY_DOMAIN_L3_CACHE +
        CL_DEVICE_AFFINITY_DOMAIN_L2_CACHE +
        CL_DEVICE_AFFINITY_DOMAIN_L1_CACHE

        Otherwise the implementation may either return a
        _param_value_size_ret_ of 0 i.e. there is no partition type
        associated with device or can return a property value of 0 (where 0
        is used to terminate the partition property list) in the memory that
        _param_value_ points to.
| CL_DEVICE_REFERENCE_COUNT
  | cl_uint
      | Returns the _device_ reference count.
        If the device is a root-level device, a reference count of one is
        returned.
| CL_DEVICE_SVM_CAPABILITIES
  | cl_device_svm_ capabilities
      | Describes the various shared virtual memory (a.k.a. SVM) memory
        allocation types the device supports.
        Coarse-grain SVM allocations are required to be supported by all
        OpenCL 2.0 devices.
        This is a bit-field that describes a combination of the following
        values:

        CL_DEVICE_SVM_COARSE_GRAIN_BUFFER - Support for coarse-grain buffer
        sharing using *clSVMAlloc*.
        Memory consistency is guaranteed at synchronization points and the
        host must use calls to *clEnqueueMapBuffer* and
        *clEnqueueUnmapMemObject*.

        CL_DEVICE_SVM_FINE_GRAIN_BUFFER - Support for fine-grain buffer
        sharing using *clSVMAlloc*.
        Memory consistency is guaranteed at synchronization points without
        need for *clEnqueueMapBuffer* and *clEnqueueUnmapMemObject*.

        CL_DEVICE_SVM_FINE_GRAIN_SYSTEM - Support for sharing the host's
        entire virtual memory including memory allocated using *malloc*.
        Memory consistency is guaranteed at synchronization points.

        CL_DEVICE_SVM_ATOMICS - Support for the OpenCL 2.0 atomic
        operations that provide memory consistency across the host and all
        OpenCL devices supporting fine-grain SVM allocations.

        The mandated minimum capability is
        CL_DEVICE_SVM_COARSE_GRAIN_BUFFER.
| CL_DEVICE_PREFERRED_PLATFORM_ATOMIC_ALIGNMENT
  | cl_uint
      | Returns the value representing the preferred alignment in bytes for
        OpenCL 2.0 fine-grained SVM atomic types.
        This query can return 0 which indicates that the preferred alignment
        is aligned to the natural size of the type.
| CL_DEVICE_PREFERRED_GLOBAL_ATOMIC_ALIGNMENT
  | cl_uint
      | Returns the value representing the preferred alignment in bytes for
        OpenCL 2.0 atomic types to global memory.
        This query can return 0 which indicates that the preferred alignment
        is aligned to the natural size of the type.
| CL_DEVICE_PREFERRED_LOCAL_ATOMIC_ALIGNMENT
  | cl_uint
      | Returns the value representing the preferred alignment in bytes for
        OpenCL 2.0 atomic types to local memory.
        This query can return 0 which indicates that the preferred alignment
        is aligned to the natural size of the type.
| CL_DEVICE_MAX_NUM_SUB_GROUPS
  | cl_uint
      | Maximum number of sub-groups in a work-group that a device is
        capable of executing on a single compute unit, for any given
        kernel-instance running on the device.
        The minimum value is 1.
        (Refer also to *clGetKernelSubGroupInfo*.)
| CL_DEVICE_SUB_GROUP_INDEPENDENT_FORWARD_PROGRESS
  | cl_bool
      | Is CL_TRUE if this device supports independent forward progress of
        sub-groups, CL_FALSE otherwise.
        If *cl_khr_subgroups* is supported by the device this must return
        CL_TRUE.
|====

4::
    A kernel that uses an image argument with the write_only or read_write
    image qualifier may result in additional read_only images resources being
    created internally by an implementation.
    The internally created read_only image resources will count against the max
    supported read image arguments given by CL_DEVICE_MAX_READ_IMAGE_ARGS.
    Enqueuing a kernel that requires more images than the implementation can
    support will result in a CL_OUT_OF_RESOURCES error being returned.

5::
    NOTE: *CL_DEVICE_MAX_WRITE_IMAGE_ARGS* is only there for backward
    compatibility.
    *CL_DEVICE_MAX_READ_WRITE_IMAGE_ARGS* should be used instead.

6::
    The optional rounding modes should be included as a device capability
    only if it is supported natively.
    All explicit conversion functions with specific rounding modes must
    still operate correctly.

7::
    The optional rounding modes should be included as a device capability
    only if it is supported natively.
    All explicit conversion functions with specific rounding modes must
    still operate correctly.

8::
    CL_DEVICE_QUEUE_PROPERTIES is deprecated and replaced by
    CL_DEVICE_QUEUE_ON_HOST_PROPERTIES.

9::
    The platform profile returns the profile that is implemented by the
    OpenCL framework.
    If the platform profile returned is FULL_PROFILE, the OpenCL framework
    will support devices that are FULL_PROFILE and may also support devices
    that are EMBEDDED_PROFILE.
    The compiler must be available for all devices i.e.
    CL_DEVICE_COMPILER_AVAILABLE is CL_TRUE.
    If the platform profile returned is EMBEDDED_PROFILE, then devices that
    are only EMBEDDED_PROFILE are supported.

*clGetDeviceInfo* returns CL_SUCCESS if the function is executed
successfully.
Otherwise, it returns one of the following errors:

  * CL_INVALID_DEVICE if _device_ is not valid.
  * CL_INVALID_VALUE if _param_name_ is not one of the supported values or
    if size in bytes specified by _param_value_size_ is < size of return
    type as specified in the link:{html_spec_relative}#device-queries-table[Device Queries] table
    and _param_value_ is not a `NULL` value or if _param_name_ is a value
    that is available as an extension and the corresponding extension is not
    supported by the device.
  * CL_OUT_OF_RESOURCES if there is a failure to allocate resources required
    by the OpenCL implementation on the device.
  * CL_OUT_OF_HOST_MEMORY if there is a failure to allocate resources
    required by the OpenCL implementation on the host.


== See Also

No cross-references are available


== Document Notes

For more information, see the OpenCL Specification at URL

https://www.khronos.org/registry/OpenCL/specs/2.2/html/OpenCL_API.html#clGetDeviceInfo

This page is extracted from the OpenCL Specification. 
Fixes and changes should be made to the Specification, not directly.

include::footer.txt[]

