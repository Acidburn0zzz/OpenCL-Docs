// Copyright 2017 The Khronos Group. 
//
//  Khronos licenses this file to you under the Creative Commons Attribution 4.0 
//  International (CC BY 4.0) License (the "License"); you may not use this file 
//  except in compliance with the License.  You may obtain a copy of the License 
//  at https://creativecommons.org/licenses/by/4.0/
//
//  Unless required by applicable law or agreed to in writing, material distributed 
//  under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR 
//  CONDITIONS OF ANY KIND, either express or implied. If all or a portion of this 
//  material is re-used, notice substantially similar to the following must be included:
//
//  This specification includes material developed at The Khronos Group 
//  (http://www.khronos.org/). Khronos supplied such material on an "AS IS" BASIS, 
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, under 
//  the terms of the Creative Commons Attribution 4.0 International (CC BY 4.0) 
//  License (the "License"), available at https://creativecommons.org/licenses/by/4.0/. 
//  All use of such material is governed by the term of the License. Khronos bears 
//  no responsibility whatsoever for additions or modifications to its material.

[[consumption]]
== SPIR-V Consumption

This section describes common properties of all OpenCL environments.  Subsequent sections describe environments for specific versions of OpenCL, and how an environment may additionally be modified via OpenCL or SPIR-V extensions.

A SPIR-V module passed to an OpenCL environment is interpreted as a series of 32-bit words in host endianness, with literal strings packed as described in the SPIR-V specification.  The first few words of the SPIR-V module must be a magic number and a SPIR-V version number, as described in the SPIR-V specification. 

// Consider a description how to use this document:
// 1) Start with the SPIR-V version as described by the module.
// 2) Subtract any restrictions defined by the environment.
// 3) Add back any additional capabilities added by extensions?

=== Validation Rules

The following are a list of validation rules that apply to SPIR-V modules executing in all OpenCL environments:

* The _Execution Model_ declared in *OpEntryPoint* must be *Kernel*.
* The _Addressing Model_ declared in *OpMemoryModel* must be either *Physical32* or *Physical64*:
** Modules indicating a *Physical32* _Addressing Model_ are valid for OpenCL devices reporting +32+ for +CL_DEVICE_ADDRESS_BITS+.
** Modules indicating a *Physical64* _Addressing Model_ are valid for OpenCL devices reporting +64+ for +CL_DEVICE_ADDRESS_BITS+.
* The _Memory Model_ declared in *OpMemoryModel* must be *OpenCL*.
* For all *OpTypeImage* type-declaration instructions:
** _MS_ must be 0, indicating single-sampled content.
** _Arrayed_ may only be set to 1, indicating arrayed content, when _Dim_ is set to *1D* or *2D*.
* The image write instruction *OpImageWrite* must not include any optional _Image Operands_.
* The image read instructions *OpImageRead*, *OpImageFetch*, and *OpImageSampleExplicitLod* must not include the optional _Image Operand_ *ConstOffset*.
* Only 32-bit integer types are supported for the _Result Type_ and/or type of _Value_ for all *Atomic Instructions*.
* Recursion is not supported.  The static function call graph for an entry point must not contain cycles.

=== Source Language Encoding

If a SPIR-V module represents a program written in OpenCL C, then the _Source Language_ operand for the *OpSource* instruction should be *OpenCL_C*, and the 32-bit literal language _Version_ should describe the version of OpenCL C, encoded MSB to LSB as:

    0 | Major Number | Minor Number | Revision Number (optional)

Hence, OpenCL C 1.2 would be encoded as +0x00010200+, and OpenCL C 2.0 as +0x00020000+.

If a SPIR-V module represents a program written in OpenCL {cpp}, then the _Source Language_ operand for the *OpSource* instruction should be *OpenCL_CPP*, and the 32-bit literal language _Version_ should describe the version of OpenCL {cpp}, encoded similarly.  Hence, OpenCL {cpp} 2.2 would be encoded as +0x00020200+.

The source language version is purely informational and has no semantic meaning.

=== Numerical Type Formats

For all OpenCL environments, floating-point types are represented and stored using IEEE-754 semantics.  All integer formats are represented and stored using 2’s compliment format.

=== Image Channel Order Mapping

The following table describes how the results of the SPIR-V *OpImageQueryOrder* instruction correspond to the OpenCL host API image channel orders.

.Image Channel Order mapping
[cols="1,1",options="header"]
|====
| *SPIR-V Image Channel Order*
| *OpenCL Image Channel Order*

| +R+
| +CL_R+

| +A+
| +CL_A+

| +RG+
| +CL_RG+

| +RA+
| +CL_RA+

| +RGB+
| +CL_RGB+

| +RGBA+
| +CL_RGBA+

| +BGRA+
| +CL_BGRA+

| +ARGB+
| +CL_ARGB+

| +Intensity+
| +CL_INTENSITY+

| +Luminance+
| +CL_LUMINANCE+

| +Rx+
| +CL_Rx+

| +RGx+
| +CL_RGx+

| +RGBx+
| +CL_RGBx+

| +Depth+
| +CL_DEPTH+

| +DepthStencil+
| +CL_DEPTH_STENCIL+

| +sRGB+
| +CL_sRGB+

| +sRGBA+
| +CL_sRGBA+

| +sBGRA+
| +CL_sBGRA+

| +sRGBx+
| +CL_sRGBx+

|====

=== Image Channel Data Type Mapping

The following table describes how the results of the SPIR-V *OpImageQueryFormat* instruction correspond to the OpenCL host API image channel data types.

.Image Channel Data Type mapping
[cols="1,1",options="header"]
|====
| *SPIR-V Image Channel Data Type*
| *OpenCL Image Channel Data Type*

| +SnormInt8+
| +CL_SNORM_INT8+

| +SnormInt16+
| +CL_SNORM_INT16+

| +UnormInt8+
| +CL_UNORM_INT8+

| +UnormInt16+
| +CL_UNORM_INT16+

| +UnormInt24+
| +CL_UNORM_INT24+

| +UnormShort565+
| +CL_UNORM_SHORT_565+

| +UnormShort555+
| +CL_UNORM_SHORT_555+

| +UnormInt101010+
| +CL_UNORM_INT_101010+

| +SignedInt8+
| +CL_SIGNED_INT8+

| +SignedInt16+
| +CL_SIGNED_INT16+

| +SignedInt32+
| +CL_SIGNED_INT32+

| +UnsignedInt8+
| +CL_UNSIGNED_INT8+

| +UnsignedInt16+
| +CL_UNSIGNED_INT16+

| +UnsignedInt32+
| +CL_UNSIGNED_INT32+

| +HalfFloat+
| +CL_HALF_FLOAT+

| +Float+
| +CL_FLOAT+

|====

=== Kernels

An *OpFunction* in a SPIR-V module that is identified with *OpEntryPoint* defines an OpenCL kernel that may be invoked using the OpenCL host API enqueue kernel interfaces.

=== Kernel Return Types

The _Result Type_ for an *OpFunction* identified with *OpEntryPoint* must be *OpTypeVoid*.

=== Kernel Arguments

An *OpFunctionParameter* for an *OpFunction* that is identified with *OpEntryPoint* defines an OpenCL kernel argument.  Allowed types for OpenCL kernel arguments are:

* *OpTypeInt*
* *OpTypeFloat*
* *OpTypeStruct*
* *OpTypeVector*
* *OpTypePointer*
* *OpTypeSampler*
* *OpTypeImage*
* *OpTypePipe*
* *OpTypeQueue*

For *OpTypeInt* parameters, supported _Widths_ are 8, 16, 32, and 64, and may be signed or unsigned.

For *OpTypeFloat* parameters, _Width_ must be 32.

For *OpTypeStruct* parameters, supported structure _Member Types_ are:

* *OpTypeInt*
* *OpTypeFloat*
* *OpTypeStruct*
* *OpTypeVector*
* *OpTypePointer*

For *OpTypePointer* parameters, supported _Storage Classes_ are:

* *CrossWorkgroup*
* *Workgroup*
* *UniformConstant*

OpenCL kernel argument types must have a representation in the OpenCL host API.  

Environments that support extensions or optional features may allow additional types in an entry point’s parameter list.
